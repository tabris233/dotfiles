# if [[ "$(uname)" == "Darwin" ]]; then # Mac OS X 操作系统
#  # install brew
#  export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
#  export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
#  export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
#  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#
#  brew install pyenv rbenv nodenv
#  brew install --HEAD goenv
# elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
# # GNU/Linux操作系统
# elif [["$(expr substr $(uname -s) 1 10)" == "MINGW32_NT" ]]; then
# # Windows NT操作系统
# fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

#  atinit"autoload -Uz compaudit compinit && compinit; zicdreplay" \
zinit wait lucid light-mode for \
  atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
      zdharma-continuum/fast-syntax-highlighting \
  atload"_zsh_autosuggest_start" \
      zsh-users/zsh-autosuggestions

# load OMZ Git Library
# zinit snippet OMZL::git.zsh
# zinit snippet OMZL::history.zsh
# zinit snippet OMZL::directories.zsh
# zinit snippet OMZL::completion.zsh
zinit for \
  OMZL::git.zsh \
  OMZL::history.zsh \
  OMZL::directories.zsh \
  OMZL::completion.zsh

# load (Git, brew, sudo, command-not-found) Plugin from OMZ
zinit snippet OMZP::git
zinit snippet OMZP::brew
zinit snippet OMZP::sudo
zinit snippet OMZP::command-not-found

zinit ice depth=1; zinit light romkatv/powerlevel10k

### End of Zinit's installer chunk

DEFAULT_USER=$USER

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias q=exit
alias c=clear

alias tmux="tmux -u"
alias vi=nvim
alias vim=nvim
alias nvi=nvim
alias tree="tree -N"
alias rm='trash'
alias ls='lsd'

unalias g

### End of aliases

# bindkey '^R' history-incremental-search-backward  # 在 tmux 中没有这句就不能使用 Ctrl+R 
# bindkey '^[[A' history-substring-search-up
# bindkey '^[[B' history-substring-search-down

export EDITOR='nvim'

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

## nodenv: node version manager
#[[ -d $HOME/.nodenv ]] || curl -fsSL https://raw.githubusercontent.com/nodenv/nodenv-installer/master/bin/nodenv-installer | bash
eval "$(nodenv init -)"
#
#
## pyenv: python version manager
#[[ -d $HOME/.pyenv ]] || curl https://pyenv.run | bash
#export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv virtualenv-init -)"
#
## rbenv: ruby version manager
#[[ -d $HOME/.rbenv ]] || curl -fsSL https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-installer | bash #curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-installer | bash
eval "$(rbenv init -)"

export PATH="/usr/local/opt/llvm/bin:$PATH"

[[ -f $HOME/.custom.sh ]] || touch $HOME/.custom.sh
source $HOME/.custom.sh

# fzf: 
export FZF_DEFAULT_COMMAND='rg --files --no-ignore-vcs --hidden'
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
